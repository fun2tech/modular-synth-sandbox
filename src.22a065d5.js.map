{"version":3,"sources":["SAudio.ts","AbstractUpdater.ts","SButtonClicker.ts","AbstractRenderer.ts","SButtonRenderer.ts","SDebugRenderer.ts","SDeviceRenderer.ts","SDisplay.ts","SDragAndDrop.ts","SKnobManager.ts","SKnobRenderer.ts","SMidiIO.ts","SMouseInput.ts","SPointerGrabber.ts","SPortRenderer.ts","SPrefabs.ts","SWireManager.ts","SWireRenderer.ts","ECS.ts","index.ts"],"names":[],"mappings":"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","file":"src.22a065d5.js","sourceRoot":"../src","sourcesContent":["import { ECS } from \"./ECS\";\n\nexport class SAudio {\n  ctx = new AudioContext();\n\n  constructor(readonly ecs: ECS) {}\n}\n","export abstract class AbstractUpdater {\n  abstract update(): void;\n}\n","import { AbstractUpdater } from \"./AbstractUpdater\";\nimport { ECS } from \"./ECS\";\n\nexport class SButtonClicker extends AbstractUpdater {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  update() {\n    for (const [entity, button] of this.ecs.buttons) {\n      const grabTarget = this.ecs.pointerGrabTargets.get(entity)!;\n      const clicked = grabTarget.grabbed && !button.down;\n      button.down = Boolean(grabTarget.grabbed);\n      if (clicked) {\n        button.onClick();\n      }\n    }\n  }\n}\n","export abstract class AbstractRenderer {\n  abstract draw(): void;\n}\n","import { AbstractRenderer } from \"./AbstractRenderer\";\nimport { ECS } from \"./ECS\";\n\nexport class SButtonRenderer extends AbstractRenderer {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  draw() {\n    const ctx = this.ecs.display.ctx;\n    ctx.lineWidth = 2;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.font = \"10px monospace\";\n\n    for (const [entity, button] of this.ecs.buttons) {\n      const { x, y, w, h } = this.ecs.display.getWorldTransform(entity);\n\n      ctx.strokeStyle = \"grey\";\n      ctx.strokeRect(x, y, w, h);\n\n      ctx.fillStyle = button.down ? \"grey\" : \"#222\";\n      ctx.fillRect(x, y, w, h);\n\n      ctx.fillStyle = \"white\";\n      ctx.fillText(button.label, x + w / 2, y + h / 2);\n    }\n  }\n}\n","import { AbstractRenderer } from \"./AbstractRenderer\";\nimport { ECS, EntityComponentMap } from \"./ECS\";\n\nexport class SDebugRenderer extends AbstractRenderer {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  draw() {\n    const ctx = this.ecs.display.ctx;\n    ctx.fillStyle = \"white\";\n    ctx.strokeStyle = \"grey\";\n    ctx.lineWidth = 1;\n    const fontSize = 8;\n    const lineHeight = fontSize * 1.5;\n    ctx.font = fontSize + \"px monospace\";\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"top\";\n\n    let lineNo = 1;\n    function write(text: string) {\n      for (const line of text.split(\"\\n\")) {\n        ctx.strokeText(\n          line,\n          2 * fontSize,\n          ctx.canvas.height - lineNo * lineHeight\n        );\n        ctx.fillText(\n          line,\n          2 * fontSize,\n          ctx.canvas.height - lineNo++ * lineHeight\n        );\n      }\n    }\n\n    for (const [key, map] of Object.entries(this.ecs)) {\n      if (map instanceof EntityComponentMap) {\n        write(\"\");\n        for (const [key, value] of map)\n          write(\n            key.toString().padEnd(40, \" \") +\n              JSON.stringify(value, (k, v) =>\n                typeof v === \"symbol\"\n                  ? v.toString()\n                  : typeof v === \"function\"\n                  ? v.name || v.constructor.name\n                  : v\n              )\n          );\n        write(\"-- \" + key + \" --\");\n      }\n    }\n\n    for (const [entity, pointer] of this.ecs.pointers) {\n      const { x, y, w, h } = this.ecs.transforms.get(entity)!;\n      ctx.strokeStyle = pointer.pressed ? \"red\" : \"lime\";\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(x, y - 10);\n      ctx.lineTo(x, y + 10);\n      ctx.moveTo(x - 10, y);\n      ctx.lineTo(x + 10, y);\n      ctx.rect(x, y, w, h);\n      ctx.stroke();\n    }\n  }\n}\n","import { AbstractRenderer } from \"./AbstractRenderer\";\nimport { ECS } from \"./ECS\";\n\nexport class SDeviceRenderer extends AbstractRenderer {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  draw() {\n    const ctx = this.ecs.display.ctx;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"top\";\n    ctx.font = \"bold 15px monospace\";\n    ctx.lineWidth = 2;\n    for (const [entity, device] of this.ecs.devices) {\n      const { x, y, w, h } = this.ecs.display.getWorldTransform(entity);\n\n      ctx.strokeStyle = \"grey\";\n      ctx.strokeRect(x, y, w, h);\n\n      ctx.fillStyle = \"#222\";\n      ctx.fillRect(x, y, w, h);\n\n      ctx.fillStyle = \"white\";\n      ctx.fillText(device.name, x + w / 2, y + 10, w - 20);\n    }\n  }\n}\n","import { AbstractRenderer } from \"./AbstractRenderer\";\nimport { AbstractUpdater } from \"./AbstractUpdater\";\nimport { ECS, Entity } from \"./ECS\";\n\nexport class SDisplay {\n  canvas = document.createElement(\"canvas\");\n  ctx = this.canvas.getContext(\"2d\")!;\n\n  constructor(readonly ecs: ECS) {\n    document.body.appendChild(this.canvas);\n    window.addEventListener(\"resize\", this.resize);\n    this.resize();\n    requestAnimationFrame(this.loop);\n  }\n\n  resize = () => {\n    this.canvas.width = document.body.clientWidth;\n    this.canvas.height = document.body.clientHeight;\n  };\n\n  loop = () => {\n    this.update();\n    this.draw();\n    requestAnimationFrame(this.loop);\n  };\n\n  update() {\n    for (const system of Object.values(this.ecs)) {\n      if (system instanceof AbstractUpdater) {\n        system.update();\n      }\n    }\n  }\n\n  draw() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n    this.ctx.font = ((this.canvas.height / 8) | 0) + \"px monospace\";\n    this.ctx.fillStyle = \"hsl(180, 50%, 10%)\";\n    this.ctx.fillText(\n      \"Modular\",\n      this.canvas.width / 2,\n      (this.canvas.height * 2) / 6\n    );\n    this.ctx.fillText(\n      \"Synth\",\n      this.canvas.width / 2,\n      (this.canvas.height * 3) / 6\n    );\n    this.ctx.fillText(\n      \"Sandbox\",\n      this.canvas.width / 2,\n      (this.canvas.height * 4) / 6\n    );\n\n    for (const system of Object.values(this.ecs)) {\n      if (system instanceof AbstractRenderer) {\n        system.draw();\n      }\n    }\n  }\n\n  getWorldTransform(entity: Entity) {\n    const transform = { ...this.ecs.transforms.get(entity)! };\n    if (transform.parent) {\n      const parent = this.getWorldTransform(transform.parent);\n      transform.x += parent.x;\n      transform.y += parent.y;\n    }\n    return transform;\n  }\n}\n","import { AbstractUpdater } from \"./AbstractUpdater\";\nimport { ECS } from \"./ECS\";\n\nexport class SDragAndDrop extends AbstractUpdater {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  update() {\n    for (const entity of this.ecs.dragAndDropTargets) {\n      const grabTarget = this.ecs.pointerGrabTargets.get(entity)!;\n      if (grabTarget.grabbed) {\n        const pointerTransform = this.ecs.transforms.get(\n          grabTarget.grabbed.pointer\n        )!;\n        const transform = this.ecs.transforms.get(entity)!;\n        transform.x = pointerTransform.x + grabTarget.grabbed.dx;\n        transform.y = pointerTransform.y + grabTarget.grabbed.dy;\n      }\n    }\n  }\n}\n","import { AbstractUpdater } from \"./AbstractUpdater\";\nimport { ECS } from \"./ECS\";\n\nexport class SKnobManager extends AbstractUpdater {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  update() {\n    for (const [entity, knob] of this.ecs.knobs) {\n      const target = this.ecs.pointerGrabTargets.get(entity)!;\n      if (target.grabbed) {\n        const dragZone = this.ecs.knobDragZones.get(entity);\n        const { y } = this.ecs.display.getWorldTransform(\n          target.grabbed.pointer\n        );\n\n        const op = (x: number) =>\n          knob.param.maxValue > 1000 ? Math.log10(x) : x;\n        const opInv = (x: number) => (knob.param.maxValue > 1000 ? 10 ** x : x);\n        if (dragZone) {\n          let percent = (y - dragZone.minY) / (dragZone.maxY - dragZone.minY);\n          percent = Math.max(0, Math.min(1, percent));\n\n          knob.param.value =\n            knob.param.minValue +\n            opInv(percent * op(knob.param.maxValue - knob.param.minValue));\n        } else {\n          let percent =\n            op(knob.param.value - knob.param.minValue) /\n            op(knob.param.maxValue - knob.param.minValue);\n          percent = Math.max(0, Math.min(1, percent));\n\n          const scale = 200;\n          const minY = y + percent * scale;\n          const maxY = minY - scale;\n\n          this.ecs.knobDragZones.set(entity, { minY, maxY });\n        }\n      } else {\n        this.ecs.knobDragZones.delete(entity);\n      }\n    }\n  }\n}\n","import { AbstractRenderer } from \"./AbstractRenderer\";\nimport { ECS } from \"./ECS\";\n\nexport class SKnobRenderer extends AbstractRenderer {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  draw() {\n    const ctx = this.ecs.display.ctx;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.font = \"10px monospace\";\n\n    const valueToAngle = (value: number) =>\n      Math.PI * (value * 2 - 1) * 0.7 - Math.PI / 2;\n    const minAngle = valueToAngle(0);\n    const maxAngle = valueToAngle(1);\n\n    for (const [entity, knob] of this.ecs.knobs) {\n      const { x, y, w, h } = this.ecs.display.getWorldTransform(entity);\n      const r = Math.min(w, h) / 2;\n\n      const op = (x: number) =>\n        knob.param.maxValue > 1000 ? Math.log10(x) : x;\n      let value =\n        op(knob.param.value - knob.param.minValue) /\n        op(knob.param.maxValue - knob.param.minValue);\n      value = Math.max(0, Math.min(1, value));\n      const valueAngle = valueToAngle(value);\n\n      ctx.strokeStyle = ctx.fillStyle =\n        \"hsl(180, \" +\n        ((value * 100) | 0) +\n        \"%, \" +\n        ((50 + value * 30) | 0) +\n        \"%)\";\n\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.arc(x + r, y + r, r, minAngle, maxAngle);\n      ctx.stroke();\n\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.arc(x + r, y + r, r, minAngle, valueAngle);\n      ctx.stroke();\n\n      ctx.fillText(knob.name, x + r, y + r);\n\n      const grabTarget = this.ecs.pointerGrabTargets.get(entity)!;\n      if (grabTarget.grabbed) {\n        const { x, y } = this.ecs.display.getWorldTransform(\n          grabTarget.grabbed.pointer\n        );\n        const d = 30;\n\n        ctx.fillStyle = \"white\";\n        ctx.fillText(knob.param.value.toFixed(2), x + d, y + d);\n      }\n    }\n  }\n}\n","import { ECS } from \"./ECS\";\n\nenum MidiB0 {\n  NOTE_ON = 144,\n  NOTE_OFF = 128,\n}\n\nexport class SMidiIO {\n  constructor(readonly ecs: ECS) {\n    let index = 0;\n    navigator.requestMIDIAccess?.().then((midi) => {\n      for (const port of midi.inputs.values()) {\n        this.createInput(port, index++);\n      }\n    });\n  }\n\n  createInput(port: WebMidi.MIDIInput, index: number) {\n    const device = this.ecs.prefabs.createDevice(\n      port.name || \"MIDI in #\" + index\n    );\n    const width = 300;\n    this.ecs.transforms.set(device, {\n      x: 10,\n      y: 10 + 100 * index,\n      w: width,\n      h: 90,\n    });\n\n    const gateNode = new ConstantSourceNode(this.ecs.audio.ctx, {\n      offset: 0,\n    });\n    gateNode.start();\n    this.ecs.prefabs.createPort({\n      name: \"gate\",\n      device,\n      node: gateNode,\n      output: 0,\n      x: (width - 32) / 2 - 25,\n      y: 40,\n    });\n\n    let lastNote = 440;\n    const freqNode = new ConstantSourceNode(this.ecs.audio.ctx, {\n      offset: lastNote,\n    });\n    freqNode.start();\n    this.ecs.prefabs.createPort({\n      name: \"freq\",\n      device,\n      node: freqNode,\n      output: 0,\n      x: (width - 32) / 2 + 25,\n      y: 40,\n    });\n\n    port.addEventListener(\"midimessage\", (e) => {\n      const [command, note, velocity] = e.data;\n      if (command === MidiB0.NOTE_ON && velocity !== 0) {\n        const freq = this.noteToFrequency(note);\n        gateNode.offset.value = 1;\n        freqNode.offset.value = freq;\n        lastNote = note;\n      } else if (\n        command === MidiB0.NOTE_OFF ||\n        (command === MidiB0.NOTE_ON && velocity === 0)\n      ) {\n        if (note === lastNote) {\n          gateNode.offset.value = 0;\n        }\n      }\n    });\n  }\n\n  noteToFrequency(note: number) {\n    return (440 / 32) * 2 ** ((note - 9) / 12);\n  }\n}\n","import { CPointer } from \"./CPointer\";\nimport { CTransform } from \"./CTransform\";\nimport { ECS, Entity } from \"./ECS\";\n\nexport class SMouseInput {\n  mouse = this.ecs.createEntity(\"mouse\");\n  transform: CTransform = { x: 0, y: 0, w: 1, h: 1 };\n  pointer: CPointer = { pressed: false };\n\n  constructor(readonly ecs: ECS) {\n    ecs.transforms.set(this.mouse, this.transform);\n    ecs.pointers.set(this.mouse, this.pointer);\n    ecs.display.canvas.addEventListener(\"mousedown\", this.onMouseDown);\n    ecs.display.canvas.addEventListener(\"mouseup\", this.onMouseUp);\n    ecs.display.canvas.addEventListener(\"mousemove\", this.onMouseMove);\n  }\n\n  onMouseDown = (e: MouseEvent): void => {\n    this.pointer.pressed = true;\n  };\n\n  onMouseUp = () => {\n    this.pointer.pressed = false;\n  };\n\n  onMouseMove = (e: MouseEvent) => {\n    this.transform.x = e.clientX;\n    this.transform.y = e.clientY;\n    this.pointer.target = this.findTargetEntity(this.transform);\n  };\n\n  findTargetEntity(\n    pointerTransform: CTransform,\n    parent?: Entity\n  ): Entity | undefined {\n    for (const targetEntity of this.ecs.pointerGrabTargets.keys()) {\n      const targetTransform = this.ecs.display.getWorldTransform(targetEntity);\n      if (\n        targetTransform.parent === parent &&\n        targetTransform.x <= this.transform.x &&\n        targetTransform.y <= this.transform.y &&\n        targetTransform.x + targetTransform.w > this.transform.x &&\n        targetTransform.y + targetTransform.h > this.transform.y\n      ) {\n        return this.findTargetEntity(pointerTransform, targetEntity);\n      }\n    }\n    return parent;\n  }\n}\n","import { AbstractUpdater } from \"./AbstractUpdater\";\nimport { ECS, Entity } from \"./ECS\";\n\nexport class SPointerGrabber extends AbstractUpdater {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  dummyGrabTargets = new Set<Entity>();\n\n  update() {\n    const freePointers = new Map(this.ecs.pointers);\n    const freeTargets = new Set(this.ecs.pointerGrabTargets.keys());\n\n    for (const [grabbedEntity, grabTarget] of this.ecs.pointerGrabTargets) {\n      if (grabTarget.grabbed) {\n        const { pressed } = this.ecs.pointers.get(grabTarget.grabbed.pointer)!;\n        if (pressed) {\n          freePointers.delete(grabTarget.grabbed.pointer);\n          freeTargets.delete(grabbedEntity);\n        } else {\n          delete grabTarget.grabbed;\n          if (this.dummyGrabTargets.has(grabbedEntity)) {\n            this.dummyGrabTargets.delete(grabbedEntity);\n            this.ecs.pointerGrabTargets.delete(grabbedEntity);\n          }\n        }\n      }\n    }\n\n    for (const [pointer, { target, pressed }] of freePointers) {\n      if (pressed && target && freeTargets.has(target)) {\n        const pointerTransform = this.ecs.transforms.get(pointer)!;\n        const grabbedTransform = this.ecs.transforms.get(target)!;\n        const dx = grabbedTransform.x - pointerTransform.x;\n        const dy = grabbedTransform.y - pointerTransform.y;\n        this.ecs.pointerGrabTargets.get(target)!.grabbed = { pointer, dx, dy };\n      } else if (pressed) {\n        this.cancelGrab(pointer);\n      }\n    }\n  }\n\n  cancelGrab(pointer: Entity) {\n    const dummy = this.ecs.createEntity(\"cancelled-grab-target\");\n    this.dummyGrabTargets.add(dummy);\n    this.ecs.pointerGrabTargets.set(dummy, {\n      grabbed: {\n        pointer,\n        dx: 0,\n        dy: 0,\n      },\n    });\n  }\n}\n","import { AbstractRenderer } from \"./AbstractRenderer\";\nimport { ECS } from \"./ECS\";\n\nexport class SPortRenderer extends AbstractRenderer {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  draw() {\n    const ctx = this.ecs.display.ctx;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.font = \"10px monospace\";\n    ctx.lineWidth = 1;\n\n    const connectedPorts = new Set(\n      [...this.ecs.wires.values()].flatMap((wire) => [\n        wire.source,\n        wire.destination,\n      ])\n    );\n\n    for (const [entity, port] of this.ecs.ports) {\n      const { x, y, w, h } = this.ecs.display.getWorldTransform(entity);\n      const r = Math.min(w, h) / 2;\n\n      const on = connectedPorts.has(entity);\n      ctx.strokeStyle = ctx.fillStyle = on ? \"white\" : \"grey\";\n\n      ctx.beginPath();\n      ctx.arc(x + r, y + r, r, -Math.PI, Math.PI);\n      ctx.stroke();\n\n      ctx.fillText(port.name, x + r, y + r);\n    }\n  }\n}\n","import { CKnob } from \"./CKnob\";\nimport { CPointerGrabTarget } from \"./CPointerGrabTarget\";\nimport { CPort } from \"./CPort\";\nimport { CTransform } from \"./CTransform\";\nimport { ECS, Entity } from \"./ECS\";\n\nexport class SPrefabs {\n  constructor(readonly ecs: ECS) {}\n\n  createScene() {\n    this.createToolbar();\n  }\n\n  createMaster() {\n    const device = this.createDevice(\"Master\");\n\n    this.createPort({\n      device,\n      name: \"spk\",\n      node: this.ecs.audio.ctx.destination,\n      input: 0,\n      x: 20,\n      y: 40,\n    });\n\n    return device;\n  }\n\n  createOscillator() {\n    const device = this.createDevice(\"Osc\");\n\n    const node = new OscillatorNode(this.ecs.audio.ctx);\n    node.start();\n\n    this.createPort({\n      name: \"freq\",\n      device,\n      param: node.frequency,\n      x: 20,\n      y: 40,\n    });\n\n    this.createKnob({\n      name: \"freq\",\n      device,\n      param: this.clampParam(node.frequency, 0, 20000),\n      x: 70,\n      y: 40,\n    });\n\n    this.createKnob({\n      name: \"dtn\",\n      device,\n      param: this.clampParam(node.detune, -100, 100),\n      x: 44,\n      y: 90,\n    });\n\n    this.createOscillatorWaveButton(device, node, \"sine\", 0);\n    this.createOscillatorWaveButton(device, node, \"triangle\", 1);\n    this.createOscillatorWaveButton(device, node, \"sawtooth\", 2);\n    this.createOscillatorWaveButton(device, node, \"square\", 3);\n\n    this.createPort({\n      name: \"out\",\n      device,\n      node,\n      output: 0,\n      x: 44,\n      y: 230,\n    });\n\n    return device;\n  }\n\n  createOscillatorWaveButton(\n    device: Entity,\n    node: OscillatorNode,\n    type: OscillatorType,\n    line: number\n  ) {\n    const button = this.ecs.createEntity(\"osc-waveform-\" + type);\n    this.ecs.transforms.set(button, {\n      parent: device,\n      x: 20,\n      y: 140 + 19 * line,\n      w: 80,\n      h: 20,\n    });\n    this.ecs.buttons.set(button, {\n      label: type,\n      onClick: () => {\n        node.type = type;\n      },\n      get down() {\n        return node.type === type;\n      },\n      set down(down) {},\n    });\n    this.ecs.pointerGrabTargets.set(button, {});\n  }\n\n  createLPF() {\n    const device = this.createDevice(\"LPF\");\n\n    const node = new BiquadFilterNode(this.ecs.audio.ctx);\n\n    this.createPort({\n      name: \"in\",\n      device,\n      node,\n      input: 0,\n      x: 45,\n      y: 40,\n    });\n\n    this.createPort({\n      name: \"fm\",\n      device,\n      param: node.frequency,\n      x: 20,\n      y: 90,\n    });\n\n    this.createKnob({\n      name: \"freq\",\n      device,\n      param: node.frequency,\n      x: 70,\n      y: 90,\n    });\n\n    this.createPort({\n      name: \"out\",\n      device,\n      node,\n      output: 0,\n      x: 45,\n      y: 140,\n    });\n\n    return device;\n  }\n\n  createGain() {\n    const device = this.createDevice(\"Gain\");\n\n    const node = new GainNode(this.ecs.audio.ctx);\n\n    this.createPort({\n      name: \"in\",\n      device,\n      node,\n      input: 0,\n      x: 45,\n      y: 40,\n    });\n\n    this.createPort({\n      name: \"out\",\n      device,\n      node,\n      output: 0,\n      x: 20,\n      y: 90,\n    });\n\n    this.createKnob({\n      name: \"gain\",\n      device,\n      param: this.clampParam(node.gain, 0, 2),\n      x: 70,\n      y: 90,\n    });\n\n    return device;\n  }\n\n  createPanner() {\n    const device = this.createDevice(\"Panner\");\n\n    const node = new StereoPannerNode(this.ecs.audio.ctx);\n\n    this.createPort({\n      name: \"in\",\n      device,\n      node,\n      input: 0,\n      x: 20,\n      y: 40,\n    });\n\n    this.createKnob({\n      name: \"pan\",\n      device,\n      param: node.pan,\n      x: 20,\n      y: 90,\n    });\n\n    this.createPort({\n      name: \"out\",\n      device,\n      node,\n      output: 0,\n      x: 20,\n      y: 140,\n    });\n\n    return device;\n  }\n\n  clampParam(param: AudioParam, minValue: number, maxValue: number) {\n    return new Proxy(param, {\n      get(target, p) {\n        if (p === \"minValue\") return minValue;\n        if (p === \"maxValue\") return maxValue;\n        return (target as any)[p];\n      },\n      set(target, p, value) {\n        (target as any)[p] = value;\n        return true;\n      },\n    });\n  }\n\n  createDevice(name: string) {\n    const getContentBox = this.getContentBox;\n    const entity = this.ecs.createEntity(name.toLowerCase());\n    this.ecs.devices.set(entity, { name });\n    this.ecs.transforms.set(entity, {\n      x: 0,\n      y: 0,\n      get w() {\n        return getContentBox(entity, \"w\");\n      },\n      get h() {\n        return getContentBox(entity, \"h\");\n      },\n    });\n    this.ecs.pointerGrabTargets.set(entity, {});\n    this.ecs.dragAndDropTargets.add(entity);\n    return entity;\n  }\n\n  createPort({\n    name,\n    device,\n    x,\n    y,\n    ...port\n  }: { device: Entity; name: string; x: number; y: number } & CPort) {\n    const entity = this.ecs.createEntity(\n      device.description + \"-\" + name.toLowerCase()\n    );\n    this.ecs.transforms.set(entity, {\n      parent: device,\n      x,\n      y,\n      w: 32,\n      h: 32,\n    });\n    this.ecs.ports.set(entity, {\n      name,\n      ...port,\n    });\n    this.ecs.pointerGrabTargets.set(entity, {});\n    return entity;\n  }\n\n  createKnob({\n    name,\n    device,\n    x,\n    y,\n    ...knob\n  }: { device: Entity; name: string; x: number; y: number } & CKnob) {\n    const entity = this.ecs.createEntity(\n      device.description + \"-\" + name.toLowerCase()\n    );\n    this.ecs.transforms.set(entity, {\n      parent: device,\n      x,\n      y,\n      w: 32,\n      h: 32,\n    });\n    this.ecs.knobs.set(entity, {\n      name,\n      ...knob,\n    });\n    this.ecs.pointerGrabTargets.set(entity, {});\n    return entity;\n  }\n\n  createToolbar() {\n    let spot = 0;\n    const self = this;\n    const nextPosition = () => ({\n      get x() {\n        return self.ecs.display.canvas.width - 110;\n      },\n      y: 10 + 20 * spot++,\n      w: 100,\n      h: 20,\n    });\n\n    this.createSpawnButton(\"Master\", () => this.createMaster(), nextPosition());\n\n    this.createSpawnButton(\n      \"Osc\",\n      () => this.createOscillator(),\n      nextPosition()\n    );\n\n    this.createSpawnButton(\"LPF\", () => this.createLPF(), nextPosition());\n\n    this.createSpawnButton(\"Gain\", () => this.createGain(), nextPosition());\n\n    this.createSpawnButton(\"Panner\", () => this.createPanner(), nextPosition());\n  }\n\n  createSpawnButton(name: string, spawn: () => Entity, transform: CTransform) {\n    const entity = this.ecs.createEntity(\"button\");\n    const grabTarget: CPointerGrabTarget = {};\n    this.ecs.transforms.set(entity, transform);\n    this.ecs.pointerGrabTargets.set(entity, grabTarget);\n    this.ecs.buttons.set(entity, {\n      label: name,\n      down: false,\n      onClick: () => {\n        const entity = spawn();\n        const transform = this.ecs.transforms.get(entity)!;\n        this.ecs.pointerGrabTargets.get(entity)!.grabbed = {\n          pointer: grabTarget.grabbed!.pointer,\n          dx: -transform.w / 2,\n          dy: -transform.h / 4,\n        };\n        delete grabTarget.grabbed;\n      },\n    });\n    return entity;\n  }\n\n  getContentBox = (entity: Entity, size: \"w\" | \"h\") => {\n    const position = size === \"w\" ? \"x\" : \"y\";\n    const children = [...this.ecs.transforms.values()].filter(\n      (t) => t.parent === entity\n    );\n    const margin = Math.min(...children.map((t) => t.x));\n    const dimension = Math.max(...children.map((t) => t[position] + t[size]));\n    return dimension + margin;\n  };\n}\n","import { AbstractUpdater } from \"./AbstractUpdater\";\nimport { CWire } from \"./CWire\";\nimport { ECS, Entity } from \"./ECS\";\n\nexport class SWireManager extends AbstractUpdater {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  update() {\n    for (const [grabbedEntity, grabTarget] of this.ecs.pointerGrabTargets) {\n      if (grabTarget.grabbed && this.ecs.ports.has(grabbedEntity)) {\n        // create a draggable wire from a port or delete an existing one\n        this.deleteWireIfExists(grabbedEntity, grabTarget.grabbed.pointer) ||\n          this.createDraggableWire(grabbedEntity, grabTarget.grabbed.pointer);\n        delete grabTarget.grabbed;\n      } else if (!grabTarget.grabbed && this.ecs.wires.has(grabbedEntity)) {\n        // connect a wire if dropped on a compatible port\n        this.dropWire(grabbedEntity);\n      }\n    }\n  }\n\n  deleteWireIfExists(grabbedEntity: Entity, pointer: Entity) {\n    for (const [wireEntity, wire] of this.ecs.wires) {\n      if (wire.source === grabbedEntity || wire.destination === grabbedEntity) {\n        this.disconnect(wire);\n        this.ecs.wires.delete(wireEntity);\n        this.ecs.pointerGrabber.cancelGrab(pointer);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  createDraggableWire(grabbedEntity: Entity, pointer: Entity) {\n    const wire = this.ecs.createEntity(\"wire\");\n    this.ecs.wires.set(wire, {\n      source: grabbedEntity,\n      destination: pointer,\n    });\n    this.ecs.pointerGrabTargets.set(wire, {\n      grabbed: {\n        pointer: pointer,\n        dx: 0,\n        dy: 0,\n      },\n    });\n  }\n\n  dropWire(grabbedEntity: Entity) {\n    const wire = this.ecs.wires.get(grabbedEntity)!;\n    const transform = this.ecs.transforms.get(wire.destination)!;\n    const target = this.ecs.mouseInput.findTargetEntity(transform);\n    let connected = false;\n    if (target && this.ecs.ports.has(target)) {\n      wire.destination = target;\n      connected = this.connect(wire);\n    }\n    if (!connected) {\n      this.ecs.wires.delete(grabbedEntity);\n    }\n    this.ecs.pointerGrabTargets.delete(grabbedEntity);\n  }\n\n  connect(wire: CWire, connect = true) {\n    let sourcePort = this.ecs.ports.get(wire.source);\n    let destinationPort = this.ecs.ports.get(wire.destination);\n\n    if (!sourcePort || !destinationPort) {\n      return false;\n    }\n\n    if (sourcePort.output === undefined) {\n      const tmp = sourcePort;\n      sourcePort = destinationPort;\n      destinationPort = tmp;\n    }\n\n    if (\n      sourcePort.output === undefined ||\n      (destinationPort.input === undefined &&\n        destinationPort.param === undefined)\n    ) {\n      return false;\n    }\n\n    if (destinationPort.param) {\n      sourcePort.node[connect ? \"connect\" : \"disconnect\"](\n        destinationPort.param,\n        sourcePort.output\n      );\n    } else {\n      sourcePort.node[connect ? \"connect\" : \"disconnect\"](\n        destinationPort.node,\n        sourcePort.output,\n        destinationPort.input\n      );\n    }\n\n    return true;\n  }\n\n  disconnect(wire: CWire) {\n    this.connect(wire, false);\n  }\n}\n","import { AbstractRenderer } from \"./AbstractRenderer\";\nimport { ECS } from \"./ECS\";\n\nexport class SWireRenderer extends AbstractRenderer {\n  constructor(readonly ecs: ECS) {\n    super();\n  }\n\n  draw() {\n    const ctx = this.ecs.display.ctx;\n    ctx.lineWidth = 10;\n    ctx.lineCap = \"round\";\n    ctx.strokeStyle = \"rgba(255, 255, 255, .3)\";\n    for (const [entity, wire] of this.ecs.wires) {\n      const source = this.ecs.display.getWorldTransform(wire.source);\n      const destination = this.ecs.display.getWorldTransform(wire.destination);\n      ctx.beginPath();\n      ctx.moveTo(source.x + source.w / 2, source.y + source.h * 0.8);\n      ctx.bezierCurveTo(\n        source.x + source.w / 2,\n        source.y + source.h * 0.8 + 100,\n        destination.x + destination.w / 2,\n        destination.y + destination.h * 0.8 + 100,\n        destination.x + destination.w / 2,\n        destination.y + destination.h * 0.8\n      );\n      ctx.stroke();\n    }\n  }\n}\n","import { CButton } from \"./CButton\";\nimport { CDevice } from \"./CDevice\";\nimport { CKnob } from \"./CKnob\";\nimport { CKnobDragZone } from \"./CKnobDragZone\";\nimport { CPointer } from \"./CPointer\";\nimport { CPointerGrabTarget } from \"./CPointerGrabTarget\";\nimport { CPort } from \"./CPort\";\nimport { CTransform } from \"./CTransform\";\nimport { CWire } from \"./CWire\";\nimport { SAudio } from \"./SAudio\";\nimport { SButtonClicker } from \"./SButtonClicker\";\nimport { SButtonRenderer } from \"./SButtonRenderer\";\nimport { SDebugRenderer } from \"./SDebugRenderer\";\nimport { SDeviceRenderer } from \"./SDeviceRenderer\";\nimport { SDisplay } from \"./SDisplay\";\nimport { SDragAndDrop } from \"./SDragAndDrop\";\nimport { SKnobManager } from \"./SKnobManager\";\nimport { SKnobRenderer } from \"./SKnobRenderer\";\nimport { SMidiIO } from \"./SMidiIO\";\nimport { SMouseInput } from \"./SMouseInput\";\nimport { SPointerGrabber } from \"./SPointerGrabber\";\nimport { SPortRenderer } from \"./SPortRenderer\";\nimport { SPrefabs } from \"./SPrefabs\";\nimport { SWireManager } from \"./SWireManager\";\nimport { SWireRenderer } from \"./SWireRenderer\";\n\nexport type Entity = Symbol;\n\nexport class EntitySet extends Set<Entity> {}\nexport class EntityComponentMap<C> extends Map<Entity, C> {}\n\nexport class ECS {\n  createEntity(name: string): Entity {\n    return Symbol(name + \"-\" + Math.random().toString(16).slice(2, 6));\n  }\n\n  transforms = new EntityComponentMap<CTransform>();\n  devices = new EntityComponentMap<CDevice>();\n  ports = new EntityComponentMap<CPort>();\n  knobs = new EntityComponentMap<CKnob>();\n  wires = new EntityComponentMap<CWire>();\n  pointers = new EntityComponentMap<CPointer>();\n  pointerGrabTargets = new EntityComponentMap<CPointerGrabTarget>();\n  dragAndDropTargets = new EntitySet();\n  knobDragZones = new EntityComponentMap<CKnobDragZone>();\n  buttons = new EntityComponentMap<CButton>();\n\n  prefabs = new SPrefabs(this);\n  audio = new SAudio(this);\n  display = new SDisplay(this);\n  mouseInput = new SMouseInput(this);\n  pointerGrabber = new SPointerGrabber(this);\n  buttonClicker = new SButtonClicker(this);\n  dragAndDrop = new SDragAndDrop(this);\n  wireManager = new SWireManager(this);\n  knobManager = new SKnobManager(this);\n  midiIO = new SMidiIO(this);\n  debugRenderer = new SDebugRenderer(this);\n  deviceRenderer = new SDeviceRenderer(this);\n  portRenderer = new SPortRenderer(this);\n  knobRenderer = new SKnobRenderer(this);\n  wireRenderer = new SWireRenderer(this);\n  buttonRenderer = new SButtonRenderer(this);\n}\n","import { ECS } from \"./ECS\";\n\nconst ecs = new ECS();\nObject.assign(window, { ecs });\necs.prefabs.createScene();\n"]}